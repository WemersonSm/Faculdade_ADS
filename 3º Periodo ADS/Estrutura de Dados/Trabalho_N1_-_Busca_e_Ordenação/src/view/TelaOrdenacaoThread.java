/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import model.Ordenacao;
import controller.DicionarioEnglishAmerican;
import controller.DicionarioPortugueseBrazilian;
import controller.DicionarioSpanish;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import model.Ordenacao_Thread;
import static view.TelaMenuIdiomas.pais;

/**
 *
 * @author Sam Gatoo
 */
public class TelaOrdenacaoThread extends javax.swing.JFrame {

    Ordenacao vetor = new Ordenacao();

    /**
     * Creates new form TelaOrdenacao
     */
    public TelaOrdenacaoThread() {
        initComponents();
        switch (pais) {
            case 1: {
                jLabel8.setText("DICIONARIO PORTUGUES");
                break;
            }
            case 2: {
                jLabel8.setText("DICIONARIO INGLES");
                break;
            }
            case 3: {
                jLabel8.setText("DICIONARIO ESPANHOL");
                break;
            }
            default: {
                jLabel8.setText("SELECIONE UM DICIONARIO");
                break;
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jButtonSelectionSort = new javax.swing.JButton();
        jButtonMergeSort = new javax.swing.JButton();
        jButtonQuickSort = new javax.swing.JButton();
        jButtonInsertionSort = new javax.swing.JButton();
        jTextFieldResultadoSelection = new javax.swing.JTextField();
        jTextFieldResultadoInsertion = new javax.swing.JTextField();
        jTextFieldResultadoMerge = new javax.swing.JTextField();
        jTextFieldResultadoQuick = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();

        jLabel5.setText("-----------");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe Print", 1, 22)); // NOI18N
        jLabel1.setText("Escolha uma ordenação THREAD");

        jButtonSelectionSort.setText("Selection Sort");
        jButtonSelectionSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelectionSortActionPerformed(evt);
            }
        });

        jButtonMergeSort.setText("Merge Sort");
        jButtonMergeSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMergeSortActionPerformed(evt);
            }
        });

        jButtonQuickSort.setText("Quick Sort");
        jButtonQuickSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonQuickSortActionPerformed(evt);
            }
        });

        jButtonInsertionSort.setText("Insertion Sort");
        jButtonInsertionSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInsertionSortActionPerformed(evt);
            }
        });

        jTextFieldResultadoSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldResultadoSelectionActionPerformed(evt);
            }
        });

        jTextFieldResultadoInsertion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldResultadoInsertionActionPerformed(evt);
            }
        });

        jTextFieldResultadoQuick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldResultadoQuickActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe Print", 1, 22)); // NOI18N
        jLabel2.setText("Resultados");

        jLabel3.setText("-----------");

        jLabel4.setText("-----------");

        jLabel6.setText("-----------");

        jLabel7.setText("-----------");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Dicionario"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("VOLTAR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe Print", 1, 22)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonMergeSort, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                        .addGap(331, 331, 331))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonInsertionSort, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(331, 331, 331))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonSelectionSort, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(331, 331, 331))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButtonQuickSort, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(6, 6, 6)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextFieldResultadoInsertion, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                                    .addComponent(jTextFieldResultadoSelection, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jTextFieldResultadoMerge, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jTextFieldResultadoQuick, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(94, 94, 94)))))
                        .addGap(19, 19, 19))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldResultadoSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSelectionSort, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldResultadoInsertion, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonInsertionSort, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldResultadoMerge, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonMergeSort, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldResultadoQuick, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonQuickSort, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldResultadoSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldResultadoSelectionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldResultadoSelectionActionPerformed

    private void jTextFieldResultadoQuickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldResultadoQuickActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldResultadoQuickActionPerformed

    private void jTextFieldResultadoInsertionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldResultadoInsertionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldResultadoInsertionActionPerformed

    private void jButtonSelectionSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelectionSortActionPerformed
        // TODO add your handling code here:
        switch (pais) {
            case 1: {
                try {
                    //DICIONARIO PORTUGUES
                    long start = System.currentTimeMillis();
                    DicionarioPortugueseBrazilian port = new DicionarioPortugueseBrazilian();
                    port.LerPortugueseBrazilianOrdenado();
                    Ordenacao_Thread tarefaSelection = new Ordenacao_Thread(port.getDicionarioPortugueseBrazilian(), "selectionsort");
                    Thread SelectionSort = new Thread(tarefaSelection);
                    //  SelectionSort.setPriority(Thread.MAX_PRIORITY);
                    SelectionSort.start();
                    port.GravarPortugueseBrazilianOrdenado();
                    SelectionSort.join();
                    long finish = System.currentTimeMillis();
                    float total = finish - start;
                    total = total / 1000;
                    DefaultTableModel valor = (DefaultTableModel) jTable1.getModel();
                    valor.setRowCount(0);
                    for (String DicionarioPortugueseBrazilian : port.getDicionarioPortugueseBrazilian()) {
                        Object[] dados = {DicionarioPortugueseBrazilian.toUpperCase()};
                        valor.addRow(dados);
                    }
                    jTextFieldResultadoSelection.setText("O Selection sort demorou " + total + " - Segundos");
                    break;
                } catch (InterruptedException ex) {
                    Logger.getLogger(TelaOrdenacaoThread.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            case 2: {
                try {
                    // TESTE DICIONARIO INGLES
                    long start = System.currentTimeMillis();
                    DicionarioEnglishAmerican eng = new DicionarioEnglishAmerican();
                    eng.LerEnglishAmerican();
                    Ordenacao_Thread tarefaSelection = new Ordenacao_Thread(eng.getDicionarioOriginalEnglishAmerican(), "selectionsort");
                    Thread SelectionSort = new Thread(tarefaSelection);
                    SelectionSort.start();
                    SelectionSort.join();
                    eng.GravarEnglishAmericanOrdenado();
                    long finish = System.currentTimeMillis();
                    float total = finish - start;
                    total = total / 1000;
                    DefaultTableModel valor = (DefaultTableModel) jTable1.getModel();
                    valor.setRowCount(0);
                    for (String DicionarioOriginalEnglishAmerican : eng.getDicionarioOriginalEnglishAmerican()) {
                        Object[] dados = {DicionarioOriginalEnglishAmerican.toUpperCase()};
                        valor.addRow(dados);
                    }
                    jTextFieldResultadoSelection.setText("O Selection sort demorou " + total + " - Segundos");
                    break;
                } catch (InterruptedException ex) {
                    Logger.getLogger(TelaOrdenacaoThread.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            case 3: {
                try {
                    long start = System.currentTimeMillis();
                    //DICIONARIO ESPANHOL
                    DicionarioSpanish span = new DicionarioSpanish();
                    span.LerSpanish();
                    Ordenacao_Thread tarefaSelection = new Ordenacao_Thread(span.getDicionarioOriginalSpanish(), "selectionsort");
                    Thread SelectionSort = new Thread(tarefaSelection);
                    SelectionSort.start();
                    SelectionSort.join();
                    span.GravarSpanishOrdenado();
                    long finish = System.currentTimeMillis();
                    float total = finish - start;
                    total = total / 1000;
                    DefaultTableModel valor = (DefaultTableModel) jTable1.getModel();
                    valor.setRowCount(0);
                    for (String dicionarioOriginalSpanish : span.getDicionarioOriginalSpanish()) {
                        Object[] dados = {dicionarioOriginalSpanish.toUpperCase()};
                        valor.addRow(dados);
                    }
                    jTextFieldResultadoSelection.setText("O Selection sort demorou " + total + " - Segundos");

                    break;
                } catch (InterruptedException ex) {
                    Logger.getLogger(TelaOrdenacaoThread.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            default: {
            }
        }
    }//GEN-LAST:event_jButtonSelectionSortActionPerformed

    private void jButtonMergeSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMergeSortActionPerformed
        // TODO add your handling code here:
        switch (pais) {
            case 1: {
                try {
                    //DICIONARIO PORTUGUES
                    long start4 = System.currentTimeMillis();
                    DicionarioPortugueseBrazilian port = new DicionarioPortugueseBrazilian();
                    port.LerPortugueseBrazilianOrdenado();
                    Ordenacao_Thread tarefaMerge = new Ordenacao_Thread(port.getDicionarioPortugueseBrazilian(), "mergesort");
                    Thread MergeSort = new Thread(tarefaMerge);
                    MergeSort.start();
                    MergeSort.join();
                    port.GravarPortugueseBrazilianOrdenado();
                    long finish4 = System.currentTimeMillis();
                    float total4 = finish4 - start4;
                    total4 = total4 / 1000;
                    DefaultTableModel valor = (DefaultTableModel) jTable1.getModel();
                    valor.setRowCount(0);
                    for (String DicionarioPortugueseBrazilian : port.getDicionarioPortugueseBrazilian()) {
                        Object[] dados = {DicionarioPortugueseBrazilian.toUpperCase()};
                        valor.addRow(dados);
                    }
                    jTextFieldResultadoMerge.setText("O Merge sort demorou " + total4 + " - Segundos");
                    break;
                } catch (InterruptedException ex) {
                    Logger.getLogger(TelaOrdenacaoThread.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            case 2: {
                try {
                    // TESTE DICIONARIO INGLES
                    long start4 = System.currentTimeMillis();
                    DicionarioEnglishAmerican eng = new DicionarioEnglishAmerican();
                    eng.LerEnglishAmerican();
                    Ordenacao_Thread tarefaMerge = new Ordenacao_Thread(eng.getDicionarioOriginalEnglishAmerican(), "mergesort");
                    Thread MergeSort = new Thread(tarefaMerge);
                    MergeSort.start();
                    MergeSort.join();
                    eng.GravarEnglishAmericanOrdenado();
                    long finish4 = System.currentTimeMillis();
                    float total4 = finish4 - start4;
                    total4 = total4 / 1000;
                    DefaultTableModel valor = (DefaultTableModel) jTable1.getModel();
                    valor.setRowCount(0);
                    for (String DicionarioOriginalEnglishAmerican : eng.getDicionarioOriginalEnglishAmerican()) {
                        Object[] dados = {DicionarioOriginalEnglishAmerican.toUpperCase()};
                        valor.addRow(dados);
                    }
                    jTextFieldResultadoMerge.setText("O Merge sort demorou " + total4 + " - Segundos");
                    break;
                } catch (InterruptedException ex) {
                    Logger.getLogger(TelaOrdenacaoThread.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            case 3: {
                try {
                    //DICIONARIO ESPANHOL
                    long start4 = System.currentTimeMillis();
                    DicionarioSpanish span = new DicionarioSpanish();
                    span.LerSpanish();
                    Ordenacao_Thread tarefaMerge = new Ordenacao_Thread(span.getDicionarioOriginalSpanish(), "mergesort");
                    Thread MergeSort = new Thread(tarefaMerge);
                    MergeSort.start();
                    MergeSort.join();
                    span.GravarSpanishOrdenado();
                    long finish4 = System.currentTimeMillis();
                    float total4 = finish4 - start4;
                    total4 = total4 / 1000;
                    DefaultTableModel valor = (DefaultTableModel) jTable1.getModel();
                    valor.setRowCount(0);
                    for (String dicionarioOriginalSpanish : span.getDicionarioOriginalSpanish()) {
                        Object[] dados = {dicionarioOriginalSpanish.toUpperCase()};
                        valor.addRow(dados);
                    }
                    jTextFieldResultadoMerge.setText("O Merge sort demorou " + total4 + " - Segundos");
                    break;
                } catch (InterruptedException ex) {
                    Logger.getLogger(TelaOrdenacaoThread.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            default: {
            }
        }
    }//GEN-LAST:event_jButtonMergeSortActionPerformed

    private void jButtonQuickSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonQuickSortActionPerformed
        // TODO add your handling code here:
        switch (pais) {
            case 1: {
                try {
                    //DICIONARIO PORTUGUES
                    long start3 = System.currentTimeMillis();
                    DicionarioPortugueseBrazilian port = new DicionarioPortugueseBrazilian();
                    port.LerPortugueseBrazilianOrdenado();
                    Ordenacao_Thread tarefaQuickSort = new Ordenacao_Thread(port.getDicionarioPortugueseBrazilian(), "quicksort");
                    Thread QuickSort = new Thread(tarefaQuickSort);
                    QuickSort.start();
                    QuickSort.join();
                    port.setDicionarioPortugueseBrazilian(tarefaQuickSort.getArr());
                    port.GravarPortugueseBrazilianOrdenado();
                    long finish3 = System.currentTimeMillis();
                    float total3 = finish3 - start3;
                    total3 = total3 / 1000;
                    DefaultTableModel valor = (DefaultTableModel) jTable1.getModel();
                    valor.setRowCount(0);
                    for (String DicionarioPortugueseBrazilian : port.getDicionarioPortugueseBrazilian()) {
                        Object[] dados = {DicionarioPortugueseBrazilian.toUpperCase()};
                        valor.addRow(dados);
                    }
                    jTextFieldResultadoQuick.setText("O Quick sort demorou " + total3 + " - Segundos");
                    break;
                } catch (InterruptedException ex) {
                    Logger.getLogger(TelaOrdenacaoThread.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            case 2: {
                try {
                    // TESTE DICIONARIO INGLES
                    long start3 = System.currentTimeMillis();
                    DicionarioEnglishAmerican eng = new DicionarioEnglishAmerican();
                    eng.LerEnglishAmerican();
                    Ordenacao_Thread tarefaQuickSort = new Ordenacao_Thread(eng.getDicionarioOriginalEnglishAmerican(), "quicksort");
                    Thread QuickSort = new Thread(tarefaQuickSort);
                    QuickSort.start();
                    QuickSort.join();
                    eng.setDicionarioOriginalEnglishAmerican(tarefaQuickSort.getArr());
                    eng.GravarEnglishAmericanOrdenado();
                    long finish3 = System.currentTimeMillis();
                    float total3 = finish3 - start3;
                    total3 = total3 / 1000;
                    eng.GravarEnglishAmericanOrdenado();
                    DefaultTableModel valor = (DefaultTableModel) jTable1.getModel();
                    valor.setRowCount(0);
                    for (String DicionarioOriginalEnglishAmerican : eng.getDicionarioOriginalEnglishAmerican()) {
                        Object[] dados = {DicionarioOriginalEnglishAmerican.toUpperCase()};
                        valor.addRow(dados);
                    }
                    jTextFieldResultadoQuick.setText("O Quick sort demorou " + total3 + " - Segundos");
                    break;
                } catch (InterruptedException ex) {
                    Logger.getLogger(TelaOrdenacaoThread.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            case 3: {
                try {
                    //DICIONARIO ESPANHOL
                    long start3 = System.currentTimeMillis();
                    DicionarioSpanish span = new DicionarioSpanish();
                    span.LerSpanish();
                    Ordenacao_Thread tarefaQuickSort = new Ordenacao_Thread(span.getDicionarioOriginalSpanish(), "quicksort");
                    Thread QuickSort = new Thread(tarefaQuickSort);
                    QuickSort.start();
                    QuickSort.join();
                    span.setDicionarioOriginalSpanish(tarefaQuickSort.getArr());
                    span.GravarSpanishOrdenado();
                    long finish3 = System.currentTimeMillis();
                    float total3 = finish3 - start3;
                    total3 = total3 / 1000;
                    DefaultTableModel valor = (DefaultTableModel) jTable1.getModel();
                    valor.setRowCount(0);
                    for (String dicionarioOriginalSpanish : span.getDicionarioOriginalSpanish()) {
                        Object[] dados = {dicionarioOriginalSpanish.toUpperCase()};
                        valor.addRow(dados);
                    }
                    jTextFieldResultadoQuick.setText("O Quick sort demorou " + total3 + " - Segundos");
                    break;
                } catch (InterruptedException ex) {
                    Logger.getLogger(TelaOrdenacaoThread.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            default: {
            }
        }
    }//GEN-LAST:event_jButtonQuickSortActionPerformed

    private void jButtonInsertionSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInsertionSortActionPerformed
        // TODO add your handling code here:
        switch (pais) {
            case 1: {
                try {
                    //DICIONARIO PORTUGUES
                    long start2 = System.currentTimeMillis();
                    DicionarioPortugueseBrazilian port = new DicionarioPortugueseBrazilian();
                    port.LerPortugueseBrazilianOrdenado();
                    Ordenacao_Thread tarefaInsertion = new Ordenacao_Thread(port.getDicionarioPortugueseBrazilian(), "insertionsort");
                    Thread InsertionSort = new Thread(tarefaInsertion);
                    InsertionSort.start();
                    InsertionSort.join();
                    port.GravarPortugueseBrazilianOrdenado();
                    long finish2 = System.currentTimeMillis();
                    float total2 = finish2 - start2;
                    total2 = total2 / 1000;
                    port.GravarPortugueseBrazilianOrdenado();
                    DefaultTableModel valor = (DefaultTableModel) jTable1.getModel();
                    valor.setRowCount(0);
                    for (String DicionarioPortugueseBrazilian : port.getDicionarioPortugueseBrazilian()) {
                        Object[] dados = {DicionarioPortugueseBrazilian.toUpperCase()};
                        valor.addRow(dados);
                    }
                    jTextFieldResultadoInsertion.setText("O Insertion sort portugues demorou " + total2 + " - Segundos");
                    break;
                } catch (InterruptedException ex) {
                    Logger.getLogger(TelaOrdenacaoThread.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            case 2: {
                try {
                    // TESTE DICIONARIO INGLES
                    long start2 = System.currentTimeMillis();
                    DicionarioEnglishAmerican eng = new DicionarioEnglishAmerican();
                    eng.LerEnglishAmerican();
                    Ordenacao_Thread tarefaInsertion = new Ordenacao_Thread(eng.getDicionarioOriginalEnglishAmerican(), "insertionsort");
                    Thread InsertionSort = new Thread(tarefaInsertion);
                    InsertionSort.start();
                    InsertionSort.join();
                    eng.GravarEnglishAmericanOrdenado();
                    long finish2 = System.currentTimeMillis();
                    float total2 = finish2 - start2;
                    total2 = total2 / 1000;
                    eng.GravarEnglishAmericanOrdenado();
                    DefaultTableModel valor = (DefaultTableModel) jTable1.getModel();
                    valor.setRowCount(0);
                    for (String DicionarioOriginalEnglishAmerican : eng.getDicionarioOriginalEnglishAmerican()) {
                        Object[] dados = {DicionarioOriginalEnglishAmerican.toUpperCase()};
                        valor.addRow(dados);
                    }
                    jTextFieldResultadoInsertion.setText("O Insertion sort inglês demorou " + total2 + " - Segundos");
                    break;
                } catch (InterruptedException ex) {
                    Logger.getLogger(TelaOrdenacaoThread.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            case 3: {
                try {
                    //DICIONARIO ESPANHOL
                    long start2 = System.currentTimeMillis();
                    DicionarioSpanish span = new DicionarioSpanish();
                    span.LerSpanish();
                    Ordenacao_Thread tarefaInsertion = new Ordenacao_Thread(span.getDicionarioOriginalSpanish(), "insertionsort");
                    Thread InsertionSort = new Thread(tarefaInsertion);
                    InsertionSort.start();
                    InsertionSort.join();
                    span.GravarSpanishOrdenado();
                    long finish2 = System.currentTimeMillis();
                    float total2 = finish2 - start2;
                    total2 = total2 / 1000;
                    DefaultTableModel valor = (DefaultTableModel) jTable1.getModel();
                    valor.setRowCount(0);
                    for (String dicionarioOriginalSpanish : span.getDicionarioOriginalSpanish()) {
                        Object[] dados = {dicionarioOriginalSpanish.toUpperCase()};
                        valor.addRow(dados);
                    }
                    jTextFieldResultadoInsertion.setText("O Insertion sort demorou " + total2 + " - Segundos");
                    break;
                } catch (InterruptedException ex) {
                    Logger.getLogger(TelaOrdenacaoThread.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            default: {
            }
        }
    }//GEN-LAST:event_jButtonInsertionSortActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        TelaMenuIdiomas nova = new TelaMenuIdiomas();
        this.dispose();
        nova.setVisible(true);

    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaOrdenacaoThread.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaOrdenacaoThread.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaOrdenacaoThread.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaOrdenacaoThread.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaOrdenacaoThread().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonInsertionSort;
    private javax.swing.JButton jButtonMergeSort;
    private javax.swing.JButton jButtonQuickSort;
    private javax.swing.JButton jButtonSelectionSort;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldResultadoInsertion;
    private javax.swing.JTextField jTextFieldResultadoMerge;
    private javax.swing.JTextField jTextFieldResultadoQuick;
    private javax.swing.JTextField jTextFieldResultadoSelection;
    // End of variables declaration//GEN-END:variables

}
